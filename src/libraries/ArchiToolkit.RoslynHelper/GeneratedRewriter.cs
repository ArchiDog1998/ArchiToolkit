using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;
using static ArchiToolkit.RoslynHelper.Extensions.SyntaxExtensions;

namespace ArchiToolkit.RoslynHelper;

/// <summary>
///     Add the autogenerated information to the node.
/// </summary>
/// <param name="type"></param>
public class GeneratedRewriter(Type type) : CSharpSyntaxRewriter
{
    /// <inheritdoc />
    public override SyntaxNode? VisitCompilationUnit(CompilationUnitSyntax node)
    {
        var newLeadingTrivia = node.GetLeadingTrivia()
            .Insert(0, Comment("// <auto-generated/>"))
            .Add(Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.DisableKeyword), true)))
            .Add(Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true)));
        var newNode = node.WithLeadingTrivia(newLeadingTrivia);
        return base.VisitCompilationUnit(newNode);
    }

    /// <inheritdoc />
    public override SyntaxNode? VisitMethodDeclaration(MethodDeclarationSyntax node)
    {
        var leadingTrivia = node.GetLeadingTrivia();
        var newNode = node
            .WithoutLeadingTrivia()
            .WithAttributeLists(node.AttributeLists.Add(GeneratedCodeAttribute(type)
                .AddAttributes(NonUserCodeAttribute())))
            .WithLeadingTrivia(leadingTrivia);
        return base.VisitMethodDeclaration(newNode);
    }

    /// <inheritdoc />
    public override SyntaxNode? VisitPropertyDeclaration(PropertyDeclarationSyntax node)
    {
        var leadingTrivia = node.GetLeadingTrivia();
        var newNode = node
            .WithoutLeadingTrivia()
            .WithAttributeLists(node.AttributeLists.Add(GeneratedCodeAttribute(type)
                .AddAttributes(NonUserCodeAttribute())))
            .WithLeadingTrivia(leadingTrivia);
        return base.VisitPropertyDeclaration(newNode);
    }

    /// <inheritdoc />
    public override SyntaxNode? VisitFieldDeclaration(FieldDeclarationSyntax node)
    {
        var leadingTrivia = node.GetLeadingTrivia();
        var newNode = node
            .WithoutLeadingTrivia()
            .WithAttributeLists(node.AttributeLists.Add(GeneratedCodeAttribute(type)))
            .WithLeadingTrivia(leadingTrivia);
        return base.VisitFieldDeclaration(newNode);
    }

    #region Type

    /// <inheritdoc />
    public override SyntaxNode? VisitStructDeclaration(StructDeclarationSyntax node)
    {
        var leadingTrivia = node.GetLeadingTrivia();
        var newNode = node
            .WithoutLeadingTrivia()
            .WithAttributeLists(node.AttributeLists.Add(GeneratedCodeAttribute(type)
                .AddAttributes(NonUserCodeAttribute())))
            .WithLeadingTrivia(leadingTrivia);
        return base.VisitStructDeclaration(newNode);
    }

    /// <inheritdoc />
    public override SyntaxNode? VisitClassDeclaration(ClassDeclarationSyntax node)
    {
        var leadingTrivia = node.GetLeadingTrivia();
        var newNode = node
            .WithoutLeadingTrivia()
            .WithAttributeLists(node.AttributeLists.Add(GeneratedCodeAttribute(type)
                .AddAttributes(NonUserCodeAttribute())))
            .WithLeadingTrivia(leadingTrivia);
        return base.VisitClassDeclaration(newNode);
    }

    #endregion

    #region Ctor/Dtor

    /// <inheritdoc />
    public override SyntaxNode? VisitConstructorDeclaration(ConstructorDeclarationSyntax node)
    {
        var leadingTrivia = node.GetLeadingTrivia();
        var newNode = node
            .WithoutLeadingTrivia()
            .WithAttributeLists(node.AttributeLists.Add(GeneratedCodeAttribute(type)
                .AddAttributes(NonUserCodeAttribute())))
            .WithLeadingTrivia(leadingTrivia);
        return base.VisitConstructorDeclaration(newNode);
    }

    /// <inheritdoc />
    public override SyntaxNode? VisitDestructorDeclaration(DestructorDeclarationSyntax node)
    {
        var leadingTrivia = node.GetLeadingTrivia();
        var newNode = node
            .WithoutLeadingTrivia()
            .WithAttributeLists(node.AttributeLists.Add(GeneratedCodeAttribute(type)
                .AddAttributes(NonUserCodeAttribute())))
            .WithLeadingTrivia(leadingTrivia);
        return base.VisitDestructorDeclaration(newNode);
    }

    #endregion
}